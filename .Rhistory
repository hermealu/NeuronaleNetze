N1 <- NN$new(4,c(9,50,50,50,50,2))
N1$calculate2(tic_tac[-10,1:100])
N1$calculate2(tic_tac[-10,1:2])
N1$cal_clas(tic_tac[-10,1:2])
y <- tic_tac[10,]
y
y <- to_categrorial(y)
?to_categorial
?as.factor
y <- as.factor(y)
y
?factor
y <- to_categorical(y)
?to_categorical
library(mltools)
install(mltools)
source('~/Documents/Uni/R/R-Projekt/R_project/NN1.R', echo=TRUE)
library(mltools)
lines <- read_lines("tic-tac-toe.data")
lines %>%
str_replace_all("negative","0") %>%
str_replace_all("positive","1") %>%
str_replace_all("x","1") %>%
str_replace_all("o","3") %>%
str_replace_all("b","2") %>%
str_extract_all("[:digit:]") ->
tic_tac1
tic_tac1
tic_tac2 <- as.numeric(unlist(tic_tac1))
tic_tac <- matrix(tic_tac2, nrow = 10)
x <- tic_tac[-10,]
y <- tic_tac[10,]
y <- one_hot(y)
y
y <- one_hot(y)
y
y <- tibble(1,y)
y
y <- one_hot(y)
y
y <- tibble(y,y)
y <- tibble(1:length(y),y)
y <- tic_tac[10,]
y <- tibble(1:length(y),y)
y
y <- one_hot(y)
y
y <- factor(y)
?factor
y <- tic_tac[10,]
y <- factor(y)
y <- one_hot(y)
y
y <- tic_tac[10,]
y <- factor(y)
y <- tibble(1:length(y),y)
y <- one_hot(y)
y <- tic_tac[10,]
y <- factor(y)
y <- tibble(1:length(y),Wert=y)
y <- one_hot(y)
y <- factor(y)
y <- tic_tac[10,]
y <- factor(y)
y <- one_hot(y)
y
y <- tibble(1=0,2=y)
y <- tic_tac[10,]
y <- tibble("1"=0,"2"=y)
y
?rowwise
y <- tic_tac[10,]
tibble("1"=y,"2"=0) %>%
rowwise(if("1"==0)mutate("2"=1)) ->
y
y
as.matrix(y)
as.matrix(y)[,930]
as.matrix(y)[940,]
y
y[930]
y[,1]
y <- as.matrix(y)
y[1,]
y[930,]
tibble("1"=y,"2"=0) %>%
rowwise(if("1"==0) mutate("2" = 1)) ->
y
y <- as.matrix(y)
y[930,]
y <- tic_tac[10,]
tibble("1"=y,"2"=0) %>%
rowwise(if("1"==0) mutate("2" = 1)) ->
y
y <- as.matrix(y)
y[930,]
cbind(y,integer(length(y)))
rbind(y,integer(length(y)))
integer(lenght(y))
integer(length(y))
y <- tic_tac[10,]
y
integer(length(y))
rbind(y,integer(length(y)))
cbind(y,integer(length(y)))
y1 <- cbind(y,integer(length(y)))
y1[1,]
x <- tic_tac[-10,]
y <- tic_tac[10,]
y
integer(length(y))
y1 <- cbind(y,integer(length(y)))
for (i in 1:length(y)){
if(y[i]==0) y1[i,2] <- 1
}
y1
y1[930,]
N1 <- NN$new(4,c(9,50,50,50,50,2))
N1$GD_clas(x,y1,iteration = 1000,delta=0.01)
tic_tac[1,1:2]
N1$cal_clas(tic_tac[-10,1:2])
y1[1,1:2]
y1[1,1:2]
y1[1,1:2]
y1[1,]
y1[1:2,]
N1$cal_clas(y1[1:2,])
N1$cal_clas(y1[1,])
y1[1,]
N1$cal_clas(t(y1[1,]))
t(y1[1:2,])
N1$cal_clas(t(y1[1:2,]))
N1$GD_clas(x,y1,iteration = 1000,delta=0.01)
x[1]
x[1,]
x[,1]
N1$cal_clas(x[,1])
x[,1:2]
N1$cal_clas(x[,1:2])
N1$cal_clas(x[,1:5])
?order
x_ <- sample(x)
x_
x <- tic_tac[-10,]
x
tic_tac
x <- tic_tac[-10,]
x
x[1,]
x[,1]
length(x)
length(x)/9
NN <- R6Class("NN", list(
L = 1, #Anzahl der Hidden Layer
B = c(1), #Breite der einzelnen Layer
W = c(1,1), #Liste soll L채nge der dim haben und Eintr채ge sind Matrizen W
d = c(1), #List der Affinen Vektoren
J = 0,
theta = c(1,1),
f = sigmoid,
initialize = function(L = 1, B = c(1,1,1), W = c(1,1,1),d=c(1,1,0), min_gewicht=-2, max_gewicht = 2 ) {
stopifnot(length(B) == L+2)
self$W <- vector(mode="list",length=L+1)
self$L <- L
self$B <- B
#Erstellen der Matrizen W
for (i in (0:L)){
self$W[i+1] <- list(matrix(runif(B[i+1]*B[i+2],min=min_gewicht,max=max_gewicht),nrow=B[i+1],ncol=B[i+2]))
}
names(self$W) <- LETTERS[1:(L+1)]
#Erstellen der affinen Vektoren d
for (i in (0:(L-1))){
self$d[i+1] <- list(matrix(runif(B[i+2],min=min_gewicht,max=max_gewicht),nrow=1,ncol=B[i+2]))
}
self$d[L+1] <- 0
names(self$d) <- LETTERS[1:(L+1)]
#Erstellen des J -> braucht man hier aber wahrscheinlich nicht sondern erst in der Berechnung
for (i in (0:L)){
self$J <- self$J + norm(self$W[[i+1]],"F")
}
#Erstellen der theta
for(i in 1:L){
self$theta[i] <- list(c(unlist(self$W[i]), unlist(self$d[i])))
}
self$theta[L+1] <- self$W[L+1]
},
#calculate f체hrt die funktion des NN aus
calculate = function(x=1){
for (j in (1:length(x))){
h <- x[j]
if (self$L >= 1){
for (i in LETTERS[1:(self$L)]){
h <- self$f(self$d[[i]] + h %*% self$W[[i]]) #letzter Schritt ist ohne Aktivierungsfunktion
}
}
h <- self$d[[LETTERS[(self$L+1)]]] + h %*% self$W[[LETTERS[(self$L+1)]]]
x[j] <- h
}
return(x)
},
calculate2 = function(x=1){
if (is.array(x)){
y <- matrix(1,nrow=dim(x)[2],ncol=self$B[self$L+2])
for (j in (1:(dim(x)[2]))){
h <- x[,j]
if (self$L >= 1){
for (i in LETTERS[1:(self$L)]){
h <- self$f(self$d[[i]] + h %*% self$W[[i]]) #letzter Schritt ist ohne Aktivierungsfunktion
}
}
h <- self$d[[LETTERS[(self$L+1)]]] + h %*% self$W[[LETTERS[(self$L+1)]]]
y[j,] <- h
}
return(y)
}
for (j in (1:length(x))){
h <- x[j]
if (self$L >= 1){
for (i in LETTERS[1:(self$L)]){
h <- self$f(self$d[[i]] + h %*% self$W[[i]]) #letzter Schritt ist ohne Aktivierungsfunktion
}
}
h <- self$d[[LETTERS[(self$L+1)]]] + h %*% self$W[[LETTERS[(self$L+1)]]]
x[j] <- h
}
return(x)
},
cal_clas = function(x=1){
if (is.array(x)){
y <- matrix(1,nrow=dim(x)[2],ncol=self$B[self$L+2])
for (j in (1:(dim(x)[2]))){
h <- x[,j]
if (self$L >= 1){
for (i in LETTERS[1:(self$L)]){
h <- self$f(self$d[[i]] + h %*% self$W[[i]]) #letzter Schritt ist ohne Aktivierungsfunktion
}
}
h <- softmax(self$d[[LETTERS[(self$L+1)]]] + h %*% self$W[[LETTERS[(self$L+1)]]])
y[j,] <- h
}
return(y)
}
y <- matrix(1,nrow=length(x),ncol=self$B[self$L+2])
for (j in (1:length(x))){
h <- x[j]
if (self$L >= 1){
for (i in LETTERS[1:(self$L)]){
h <- self$f(self$d[[i]] + h %*% self$W[[i]]) #letzter Schritt ist ohne Aktivierungsfunktion
}
}
h <- softmax(self$d[[LETTERS[(self$L+1)]]] + h %*% self$W[[LETTERS[(self$L+1)]]])
y[j,] <- h
}
return(y)
},
eval_till_layer = function(x=1,Layer=1){
if (Layer == self$L +1){
x <- self$calculate(x)
}
if (self$L >= 1){
for (i in LETTERS[1:(Layer)]){
x <- self$f(self$d[[i]] + x %*% self$W[[i]]) #letzter Schritt ist ohne Aktivierungsfunktion
}
}
return(x)
},
#Durchf체hren eines Gradientdescends
GD = function(x,y,lambda=1,stepsize=1e-4,iterations=100){
n <- length(x)
R1 <- 1/n * sum((y-self$calculate(x))^2)
for (i in 1:iterations){
self$W[["A"]] <- self$W[["A"]] + 1e-3 * x[i] * (y[i]-self$calculate(x[i]))
}
R2 <- 1/n * sum((y-self$calculate(x))^2)
},
GD2 = function(x,y,lambda=1,stepsize=1e-4,iterations=100){
n <- length(x)
for (i in 1:n){
self$W[[LETTERS[self$L+1]]] <- self$W[[LETTERS[self$L+1]]] + t(0.1*self$eval_till_layer(x[i],self$L)*(y[i]-self$calculate(x[i])))
self$W[[LETTERS[self$L]]] <- self$W[[LETTERS[self$L]]] + 0.1*t(self$W[[LETTERS[self$L+1]]])*self$eval_till_layer(x[i],self$L)*(y[i]-self$calculate(x[i]))
}
},
GD3 = function(x,y,iteration=10,delta=0.02){
for (j in 1:iteration){
W_tmp <- vector(mode="list",length=self$L+1)
names(W_tmp) <- LETTERS[1:(self$L+1)]
d_tmp <- vector(mode="list",length=self$L+1)
names(d_tmp) <- LETTERS[1:(self$L+1)]
R1 <- sum((y-self$calculate2(x))^2)
for (k in 1:(self$L +1)){
W_tmp[[LETTERS[k]]] <- self$W[[LETTERS[k]]]
for (l in 1:length(self$W[[LETTERS[k]]])){
self$W[[LETTERS[k]]][l] <- self$W[[LETTERS[k]]][l] + runif(1,min=-delta,max=delta)
}
d_tmp[[LETTERS[k]]] <- self$d[[LETTERS[k]]]
for (l in 1:length(self$d[[LETTERS[k]]])){
self$d[[LETTERS[k]]][l] <- self$d[[LETTERS[k]]][l] + runif(1,min=-delta,max=delta)
}
}
R2 <- sum((y-self$calculate2(x))^2)
if (R1 < R2){
self$W <- W_tmp
self$d <- d_tmp
}
print(R1)
print(R2)
if (j %% 10){
print(j/10)
}
}
},
GD_clas = function(x,y,iteration=10,delta=0.02){
for (j in 1:iteration){
W_tmp <- vector(mode="list",length=self$L+1)
names(W_tmp) <- LETTERS[1:(self$L+1)]
d_tmp <- vector(mode="list",length=self$L+1)
names(d_tmp) <- LETTERS[1:(self$L+1)]
R1 <- sum((y-self$cal_clas(x))^2)
for (k in 1:(self$L +1)){
W_tmp[[LETTERS[k]]] <- self$W[[LETTERS[k]]]
for (l in 1:length(self$W[[LETTERS[k]]])){
self$W[[LETTERS[k]]][l] <- self$W[[LETTERS[k]]][l] + runif(1,min=-delta,max=delta)
}
d_tmp[[LETTERS[k]]] <- self$d[[LETTERS[k]]]
for (l in 1:length(self$d[[LETTERS[k]]])){
self$d[[LETTERS[k]]][l] <- self$d[[LETTERS[k]]][l] + runif(1,min=-delta,max=delta)
}
}
R2 <- sum((y-self$cal_clas(x))^2)
if (R1 < R2){
self$W <- W_tmp
self$d <- d_tmp
}
print(R1)
print(R2)
if (j %% 10){
print(j/10)
}
}
}
)
)
lines <- read_lines("tic-tac-toe.data")
lines %>%
str_replace_all("negative","0") %>%
str_replace_all("positive","1") %>%
str_replace_all("x","1") %>%
str_replace_all("o","3") %>%
str_replace_all("b","2") %>%
str_extract_all("[:digit:]") ->
tic_tac1
tic_tac2 <- as.numeric(unlist(tic_tac1))
tic_tac <- matrix(tic_tac2, nrow = 10)
tic_tac
x <- tic_tac[-10,1:950]
y <- tic_tac[10,1:950]
y
y1 <- cbind(y,integer(length(y)))
for (i in 1:length(y)){
if(y[i]==0) y1[i,2] <- 1
}
N1 <- NN$new(4,c(9,50,50,50,50,2))
x[,1:2]
N1$cal_clas(x[,1:5])
N1$GD_clas(x,y1,iteration = 1000,delta=0.01)
N1$cal_clas(x[,1:5])
N1$GD_clas(x,y1,iteration = 1000,delta=0.01)
N1$cal_clas(x[,1:5])
N1$cal_clas(x[,930])
N1$cal_clas(x[,930:931])
N1$GD_clas(x,y1,iteration = 1000,delta=0.01)
N1$cal_clas(x[,930:931])
N1$GD_clas(x,y1,iteration = 1000,delta=0.01)
x[,1:2]
N1$cal_clas(x[,930:931])
N1$cal_clas(x[,1:5])
N1$GD_clas(x,y1,iteration = 1000,delta=0.01)
N1$GD_clas(x,y1,iteration = 1000,delta=0.001)
x[,1:2]
N1$cal_clas(x[,1:5])
N1$cal_clas(x[,625:629])
N1$GD_clas(x,y1,iteration = 1000,delta=0.001)
y1[,625:629]
y1[625:629,]
N1$cal_clas(x[,625:629])
y1[625:629,]-N1$cal_clas(x[,625:629])
y1[625:629,]-N1$cal_clas(x[,625:629])
sum((y1[625:629,]-N1$cal_clas(x[,625:629]))^2)
sum((y1[625:628,]-N1$cal_clas(x[,625:628]))^2)
N1$GD_clas(x,y1,iteration = 1000,delta=0.001)
y1[625:628,]
N1$cal_clas(x[,625:628])
N1$GD_clas(x,y1,iteration = 1000,delta=0.001)
y1[625:628,]
N1$cal_clas(x[,625:628])
N1$GD_clas(x,y1,iteration = 10000,delta=0.001)
y1[625:628,]
N1$cal_clas(x[,625:628])
N1$GD_clas(x,y1,iteration = 10000,delta=0.005)
y1[625:628,]
N1$cal_clas(x[,625:628])
N1$cal_clas(x[,1:5])
N1$cal_clas(x[,1:10])
N1$GD_clas(x,y1,iteration = 10000,delta=0.005)
x_all <- tic_tac[-10,]
N1$cal_clas(x_all[,951:952])
N1$cal_clas(x_all[,948:950])
y1[948:950,]
N1$cal_clas(x_all[,948:950])
N1$GD_clas(x,y1,iteration = 10000,delta=0.005)
y1[948:950,]
N1$cal_clas(x_all[,948:950])
N1$GD_clas(x,y1,iteration = 10000,delta=0.005)
y1[948:950,]
N1$cal_clas(x_all[,948:950])
N1$cal_clas(x_all[,1:5])
N1$cal_clas(x_all[,10:20])
N1$cal_clas(x_all[,700:710])
N1$cal_clas(x_all[,810:820])
N1$cal_clas(x_all[,620:630])
N1$GD_clas(x,y1,iteration = 10000,delta=0.005)
N1$cal_clas(x_all[,951:958])
N1$GD_clas(x,y1,iteration = 10000,delta=0.005)
y1[948:950,]
N1$cal_clas(x_all[,951:958])
N1$GD_clas(x,y1,iteration = 10000,delta=0.005)
y1[948:951,]
N1$cal_clas(x_all[,945:955])
y1[945:955,]
y1[945:950,]
N1$cal_clas(x_all[,945:955])
N1$GD_clas(x,y1,iteration = 10000,delta=0.005)
y1[945:950,]
N1$cal_clas(x_all[,945:955])
N1 <- NN$new(2,c(9,200,50,2))
N1$GD_clas(x,y1,iteration = 50000,delta=0.005)
N1 <- NN$new(2,c(9,100,50,2))
N1$GD_clas(x,y1,iteration = 50000,delta=0.005)
N1 <- NN$new(2,c(9,100,50,2))
N1$GD_clas(x,y1,iteration = 50000,delta=0.01)
y1[620:630,]
N1$cal_clas(x_all[,620:630])
N1$GD_clas(x,y1,iteration = 50000,delta=0.01)
y1[620:630,]
N1$cal_clas(x_all[,620:630])
N1$GD_clas(x,y1,iteration = 50000,delta=0.002)
y1[620:630,]
N1$cal_clas(x_all[,620:630])
N1$cal_clas(x_all[,820:830])
N1$cal_clas(x_all[,150:160])
N1$cal_clas(x_all[,945:955])
N1$GD_clas(x,y1,iteration = 50000,delta=0.002)
y1[620:630,]
N1$cal_clas(x_all[,945:955])
N1$GD_clas(x,y1,iteration = 50000,delta=0.002)
y1[620:630,]
N1$cal_clas(x_all[,620:630])
N1$cal_clas(x_all[,945:955])
source('~/Documents/Uni/R/R-Projekt/R_project/NN1.R', echo=TRUE)
lines2 <- read_lines("poker-hand-testing.data")
lines2 %>%
str_extract_all("[:digit:]") ->
poker1
poker2 <- as.numeric(unlist(poker1))
poker <- matrix(poker2, nrow = 11)
length(poker2) %% 11
length(poker2) %% 12
length(poker2) %% 10
poker2
lines2 <- read_lines("poker-hand-testing.data")
lines2 %>%
str_extract_all("*[:digit:]") ->
poker1
lines2 %>%
str_extract_all("[:digit:]+") ->
poker1
poker2 <- as.numeric(unlist(poker1))
poker <- matrix(poker2, nrow = 11)
poker
x_poker <- poker[-11,]
x_poker <- poker[-11,]
x <- tic_tac[-10,1:950]
x_all <- tic_tac[-10,]
y <- tic_tac[10,1:950]
y_poker <- poker[11,]
y1 <- cbind(y,integer(length(y)))
for (i in 1:length(y)){
if(y[i]==0) y1[i,2] <- 1
}
y1 <- cbind(y_poker,integer(length(y_poker)))
for (i in 1:length(y_poker)){
if(y_poker[i]==0) y1[i,2] <- 1
}
y_poker1 <- cbind(y_poker,integer(length(y_poker)))
for (i in 1:length(y_poker)){
if(y_poker[i]==0) y_poker1[i,2] <- 1
}
y_poker1
y_poker1 <- cbind(y_poker,integer(length(y_poker)))
for (i in 1:length(y_poker)){
if(y_poker[i]==0) y_poker1[i,2] <- 1
if(y_poker[i]!=0) y_poker1[i,1] <- 1
}
y_poker1
N1 <- NN$new(4,c(10,50,50,50,50,2))
N1$cal_clas(x_poker[,1:2])
N1 <- NN$new(4,c(10,50,50,50,50,2))
N1 <- NN$new(4,c(10,50,50,50,50,2))
N1$GD_clas(x_poker,y_poker1,iteration = 1000,delta=0.02)
source('~/Documents/Uni/R/R-Projekt/R_project/NN1.R', echo=TRUE)
source('~/Documents/Uni/R/R-Projekt/R_project/NN1.R', echo=TRUE)
dim(poker)
